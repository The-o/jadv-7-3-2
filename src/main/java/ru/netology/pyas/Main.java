/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.netology.pyas;

import java.util.Random;
import java.util.concurrent.atomic.LongAdder;

public class Main {
    private static final int MIN_SUM = 1;
    private static final int MAX_SUM = 1000;

    private static final int SHOP1_SUMS = 200;
    private static final int SHOP2_SUMS = 300;
    private static final int SHOP3_SUMS = 500;

    public static void main(String[] args) {
        int[] shop1Sums = generateSums(SHOP1_SUMS);
        int[] shop2Sums = generateSums(SHOP2_SUMS);
        int[] shop3Sums = generateSums(SHOP3_SUMS);
        LongAdder adder = new LongAdder();

        Thread shop1Thread = new Thread(getSummator(adder, shop1Sums));
        Thread shop2Thread = new Thread(getSummator(adder, shop2Sums));
        Thread shop3Thread = new Thread(getSummator(adder, shop3Sums));

        shop1Thread.start();
        shop2Thread.start();
        shop3Thread.start();

        try {
            shop1Thread.join();
            shop2Thread.join();
            shop3Thread.join();
        } catch (InterruptedException e) {
        }

        System.out.println("Сумма: " + adder.sum());
    }

    private static int[] generateSums(int num) {
        Random rng = new Random();
        int[] result = new int[num];

        for (int i = 0; i < num; ++i) {
            result[i] = rng.nextInt(MAX_SUM - MIN_SUM) + MIN_SUM;
        }

        return result;
    }

    private static Runnable getSummator(LongAdder adder, int[] sums) {
        return () -> {
            for (int i = 0; i < sums.length; ++i) {
                adder.add(sums[i]);
            }
        };
    }
}
